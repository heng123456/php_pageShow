//zjhoo 地图工具 封装
import { getMapConfig , getMapImg } from "@/datums/api/map";
import { stationListAll } from "@/datums/api/station";
import { carsPath } from "@/datums/api/path";
import axios from 'axios'

(function(w) {
    //api引入----------------------------------

    //属性--------------------------------------
	var m = function() {
        this.rootBg = '';           //---背景层DOM元素---
        this.bg_ = {               //---背景配置---
            base64:'',  //图片
            h:'100',
            w:'400',
            ho:'',//图片原始高度
            wo:'',
            equal:'w',      //w 宽度100% h高度100%
            percentage:'',  //图片的原始长宽比率
            winW:'',    //win窗口宽度
        }

        this.rootStage = ''         //---舞台层DOM元素---
        this.stage_ = {             //---舞台配置---
            h:'',
            w:'',
            realH:'',   //真实仓库的二维坐标宽度
            ratio:0,    //12.208585580627403, //地图缩放比
            translateX:'',                  //偏移量x
            translateY:'',	                //偏移量y
        }

        this.rootStas = ''          //---静态层DOM元素---
        this.stations_ = {          //---站点配置---
            
        }

        this.rootCars = ''           //---动画层DOM元素---
        this.cars_ = {              //---车辆配置---
            lines:[] //小车们的路径
        }
    }

    //方法-------------------------------------
    //获取背景地图
    m.prototype.init = function() {
        this.rootBg = document.getElementById('rootBg')             //背景层DOM元素
        this.rootStage = document.getElementById('canvasBg');       //舞台  DOM元素
        this.rootStas = document.getElementById('rootStas');        //静态层DOM元素
        this.rootCars = document.getElementById('rootCars');        //动画层DOM元素

        getMapImg().then(res => {
            this.bg_.base64 = res.data.image;
            this.bg_.ho = res.data.height;
            this.bg_.wo = res.data.width;
            console.log(res)
            this.rootBg.src = 'data:image/png;base64,'+this.bg_.base64;
            this.bg_.percentage =  this.bg_.wo/this.bg_.ho; //长宽比率


      
            this.changeWH(this.rootBg); 
            this.changeWH(this.rootStage);
            this.changeWH( this.rootStas);
            this.changeWH(this.rootCars)

            // this.doCanvasBg();
            this.listenChange();

            this.getRatio()

            // this.getCarsLine();
        })
        
    }



    m.prototype.listenChange = function(){
        window.onresize = () => {
            return (() => {
                this.changeWH(this.rootBg);
             })()
        }
    }

    //调整img/canvas... 宽高
    m.prototype.changeWH = function(e){ 
        window.screenWidth = document.body.clientWidth
        this.bg_.winW  = window.screenWidth
        console.log(this.bg_.winW)
        if(this.bg_.winW < 1205) return;
        let h,w;
        if(this.bg_.equal == 'w'){
            w = this.bg_.winW - 240;
            h = w/this.bg_.percentage
        }else{
            w = 760*this.bg_.percentage;
            h = 760;
        }
        e.width = w;
        e.height = h;
        this.stage_.h = h;
        this.stage_.w = w;
    },

    //绘制canvas 背景
    m.prototype.doCanvasBg = function(){
        // if(this.bg_.percentage>1){ //图片较宽
        //     this.changeWH(this.rootStage)
        //     this.stage_.w = 1000;
        //     this.stage_.h = 1000/this.bg_.percentage;
        // }else{ //较高
        //     this.stage_.w = 1000/this.bg_.percentage;
        //     this.stage_.h = 1000;
        // }

        var stageBg = this.rootStage.getContext('2d')
        // this.rootBg.onload = function() {
            stageBg.save();
            stageBg.translate(this.stage_.w,this.stage_.h);
            stageBg.rotate(180*Math.PI/180);
            stageBg.drawImage(this.rootBg, 0, 0, this.stage_.w, this.stage_.h);
            stageBg.restore();
        // }

        // let canvasAnim = document.getElementById("canvasAnim");
        this.rootStage.height = this.stage_.h
        this.rootStage.width  = this.stage_.w;
        this.getRatio()
    },

    ///获取 舞台缩放比率
    m.prototype.getRatio = function(){
        debugger
        getMapConfig().then(res => {
            // let s = this.stage_ ;
            
            if(!res || !res.data || !res.data.leftUpXY || !res.data.rightUpXY ){ 
                // return console.log("获取 舞台缩放比率失败")
                return Message({
                    message: "获取 地图配置 失败",
                    type: 'error',
                    duration: 3 * 1000
                  })
            };
            debugger
            let d, leftUp,leftDown,rightUp,rightDown,realStage

            d = res.data

            leftUp  = d.leftUpXY.split(',')
            rightUp = d.rightUpXY.split(',')
            this.stage_.realH = leftUp[0] - rightUp[0];  //真实仓库的二维坐标de宽度

            this.stage_.ratio =this.stage_.h/Math.abs(this.stage_.realH);  //缩放量
            
            this.stage_.translateX = Math.abs(leftUp[0]); //偏移量x
            this.stage_.translateY = Math.abs(leftUp[1]);
            
        //    this.stage_ = s;
        })
        this.stage_.ratio;
        debugger;

        this.getCarsLine(); //获取的路径 和偏移量 缩放量  绘制动画层Animation
    }

    m.prototype.getCarsLine = function(){
        // carsPath().then(res => {
        //     console.log(res)
        //     data = res.data.Data;
        //     //data = "-66.776,-126.57589967024083,6.1;-67.27600000000002,-126.57589967024083,6.1;-67.77599999999997,-126.57589967024083,6.1;-68.276,-126.57589967024083,6.1;-68.77600000000002,-126.57589967024083,6.1;-69.27599999999997,-126.57589967024083,6.1;-69.776,-126.57589967024083,6.1;-70.27600000000002,-126.57589967024083,6.1;-70.77599999999997,-126.57589967024083,6.1;-71.276,-126.57589967024083,6.1;-71.77600000000002,-126.57589967024083,6.1;-72.27599999999997,-126.57589967024083,6.1;-72.776,-126.57589967024083,6.1;-73.27600000000002,-126.57589967024083,6.1;-73.77599999999995,-126.57589967024083,6.1;-74.27599999999998,-126.57589967024083,6.1;-74.77600000000002,-126.57589967024083,6.1;-75.27599999999997,-126.57589967024083,6.1;-75.776,-126.57589967024083,6.1;-76.27600000000001,-126.57589967024083,6.1;-76.77599999999997,-126.57589967024083,6.1;-77.276,-126.57589967024083,6.1;-77.77600000000002,-126.57589967024083,6.1;-78.27599999999995,-126.57589967024083,6.1;-78.776,-126.57589967024083,6.1;-79.27600000000002,-126.57589967024083,6.1;-79.77599999999997,-126.57589967024083,6.1;-80.27599999999998,-126.57589967024083,6.1;-80.77600000000001,-126.57589967024083,6.1;-81.27599999999997,-126.57589967024083,6.1;-81.776,-126.57589967024083,6.1;-82.27600000000001,-126.57589967024083,6.1;-82.77599999999997,-126.57589967024083,6.1;-83.276,-126.57589967024083,6.1;-83.77600000000002,-126.57589967024083,6.1;-84.27599999999995,-126.57589967024083,6.1;-84.77599999999998,-126.57589967024083,6.1;-85.27600000000001,-126.57589967024083,6.1;-85.77599999999997,-126.57589967024083,6.1;-86.27599999999998,-126.57589967024083,6.1;-86.77600000000001,-126.57589967024083,6.1;-87.27599999999997,-126.57589967024083,6.1;-87.776,-126.57589967024083,6.1;-88.27600000000001,-126.57589967024083,6.1;-88.77599999999995,-126.57589967024083,6.1;-89.27599999999998,-126.57589967024083,6.1;-89.77600000000002,-126.57589967024083,6.1;-90.27599999999995,-126.57589967024083,6.1;-90.77599999999998,-126.57589967024083,6.1;-91.27600000000001,-126.57589967024083,6.1;-91.77599999999997,-126.57589967024083,6.1;-92.27599999999998,-126.57589967024083,6.1;-92.77600000000001,-126.57589967024083,6.1;-93.27599999999995,-126.57589967024083,6.1;-93.776,-126.57589967024083,6.1;-94.27600000000002,-126.57589967024083,6.1;-94.77600000000004,-126.57589967024083,6.1;-95.27599999999998,-126.57589967024083,6.1;-95.77600000000001,-126.57589967024083,6.1;-96.27600000000005,-126.57589967024083,6.1;-96.77599999999998,-126.57589967024083,6.1;-97.27600000000001,-126.57589967024083,6.1;-97.77599999999997,-126.57589967024083,6.1;-98.27599999999998,-126.57589967024083,6.1;-98.77600000000001,-126.57589967024083,6.1;-99.27599999999995,-126.57589967024083,6.1;-99.77599999999998,-126.57589967024083,6.1;-100.27600000000001,-126.57589967024083,6.1;-100.77599999999995,-126.57589967024083,6.1;-101.27599999999998,-126.57589967024083,6.1;-101.77600000000001,-126.57589967024083,6.1;-102.27599999999995,-126.57589967024083,6.1;-102.77599999999998,-126.57589967024083,6.1;-103.27600000000001,-126.57589967024083,6.1;-103.77599999999995,-126.57589967024083,6.1;-104.27599999999997,-126.57589967024083,6.1;-104.77600000000001,-126.57589967024083,6.1;-104.83100000000005,-126.57589967024083,6.1;-105.09246722824304,-126.5873155759656,6.1;-105.35194453300085,-126.62147641120418,6.1;-105.60745713530764,-126.67812219137362,6.1;-105.85706042997705,-126.75682180788311,6.1;-106.0988547852221,-126.85697630913091,6.1;-106.33100000000005,-126.97782345888754,6.1;-106.5517293090532,-127.11844353737382,6.1;-106.75936282905968,-127.27776634088391,6.1;-106.95232034355966,-127.45457932668121,6.1;-107.12913332935696,-127.64753684118119,6.1;-107.28845613286705,-127.85517036118767,6.1;-107.42907621135335,-128.07589967024083,6.1;-107.54992336110996,-128.30804488501877,6.1;-107.65007786235776,-128.5498392402638,6.1;-107.72877747886726,-128.79944253493323,6.1;-107.7854232590367,-129.05495513724003,6.1;-107.81958409427527,-129.31443244199784,6.1;-107.83100000000005,-129.57589967024083,6.1;-107.83100000000005,-130.07589967024086,6.1;-107.83100000000005,-130.5758996702408,6.1;-107.83100000000005,-131.07589967024083,6.1;-107.83100000000005,-131.57589967024086,6.1;-107.83100000000005,-132.0758996702408,6.1;-107.83100000000005,-132.57589967024083,6.1;-107.83100000000005,-133.07589967024086,6.1;-107.83100000000005,-133.5758996702408,6.1;-107.83100000000005,-134.07589967024083,6.1;-107.83100000000005,-134.29375000000007,6.1;-107.84622120763305,-134.64237297099072,6.1;-107.89176898795121,-134.9883427106678,6.1;-107.9672966948438,-135.3290261804102,6.1;-108.07222951685642,-135.66183057330275,6.1;-108.20576885185342,-135.98422304696282,6.1;-108.3668983848623,-136.2937500000001,6.1;-108.55439182284407,-136.5880557454043,6.1;-108.76682222752416,-136.86490043874628,6.1;-109.00257287525383,-137.12217712474626,6.1;-109.2598495612539,-137.357927772476,6.1;-109.53669425459589,-137.570358177156,6.1;-109.83100000000007,-137.75785161513778,6.1;-110.14052695303727,-137.91898114814668,6.1;-110.46291942669743,-138.05252048314367,6.1;-110.79572381958997,-138.1574533051564,6.1;-111.13640728933237,-138.23298101204895,6.1;-111.48237702900944,-138.27852879236704,6.1;-111.83100000000002,-138.29375000000005,6.1;-112.33100000000005,-138.29375000000005,6.1;-112.6845,-138.29375000000005,6.1"
        //     var arr = data.split(';');

        //     var el = elr = arrAll = [];
        //     var html = '';
            
        //     for (let i = 0; i < arr.length; i++) {
        //         el = arr[i];
        //         var elr = el.split(',');
        //         arrAll.push(elr)
        //     }
        //     this.cars_.lines = arrAll;
        //     // this.$refs.test.innerHTML  = html;
        //     // this.drawcanvasAnim(arrAll)

        // })

        axios({
            methods: 'get',
                url: 'http://*********/api/evroute/00300301',
            })
            .then( (response) => {
                var el = elr  = [];
                var arrAll = [];
                var html = '';
                
                // var data = response.data.Data;
                var data = "-66.776,-126.57589967024083,6.1;-67.27600000000002,-126.57589967024083,6.1;-67.77599999999997,-126.57589967024083,6.1;-68.276,-126.57589967024083,6.1;-68.77600000000002,-126.57589967024083,6.1;-69.27599999999997,-126.57589967024083,6.1;-69.776,-126.57589967024083,6.1;-70.27600000000002,-126.57589967024083,6.1;-70.77599999999997,-126.57589967024083,6.1;-71.276,-126.57589967024083,6.1;-71.77600000000002,-126.57589967024083,6.1;-72.27599999999997,-126.57589967024083,6.1;-72.776,-126.57589967024083,6.1;-73.27600000000002,-126.57589967024083,6.1;-73.77599999999995,-126.57589967024083,6.1;-74.27599999999998,-126.57589967024083,6.1;-74.77600000000002,-126.57589967024083,6.1;-75.27599999999997,-126.57589967024083,6.1;-75.776,-126.57589967024083,6.1;-76.27600000000001,-126.57589967024083,6.1;-76.77599999999997,-126.57589967024083,6.1;-77.276,-126.57589967024083,6.1;-77.77600000000002,-126.57589967024083,6.1;-78.27599999999995,-126.57589967024083,6.1;-78.776,-126.57589967024083,6.1;-79.27600000000002,-126.57589967024083,6.1;-79.77599999999997,-126.57589967024083,6.1;-80.27599999999998,-126.57589967024083,6.1;-80.77600000000001,-126.57589967024083,6.1;-81.27599999999997,-126.57589967024083,6.1;-81.776,-126.57589967024083,6.1;-82.27600000000001,-126.57589967024083,6.1;-82.77599999999997,-126.57589967024083,6.1;-83.276,-126.57589967024083,6.1;-83.77600000000002,-126.57589967024083,6.1;-84.27599999999995,-126.57589967024083,6.1;-84.77599999999998,-126.57589967024083,6.1;-85.27600000000001,-126.57589967024083,6.1;-85.77599999999997,-126.57589967024083,6.1;-86.27599999999998,-126.57589967024083,6.1;-86.77600000000001,-126.57589967024083,6.1;-87.27599999999997,-126.57589967024083,6.1;-87.776,-126.57589967024083,6.1;-88.27600000000001,-126.57589967024083,6.1;-88.77599999999995,-126.57589967024083,6.1;-89.27599999999998,-126.57589967024083,6.1;-89.77600000000002,-126.57589967024083,6.1;-90.27599999999995,-126.57589967024083,6.1;-90.77599999999998,-126.57589967024083,6.1;-91.27600000000001,-126.57589967024083,6.1;-91.77599999999997,-126.57589967024083,6.1;-92.27599999999998,-126.57589967024083,6.1;-92.77600000000001,-126.57589967024083,6.1;-93.27599999999995,-126.57589967024083,6.1;-93.776,-126.57589967024083,6.1;-94.27600000000002,-126.57589967024083,6.1;-94.77600000000004,-126.57589967024083,6.1;-95.27599999999998,-126.57589967024083,6.1;-95.77600000000001,-126.57589967024083,6.1;-96.27600000000005,-126.57589967024083,6.1;-96.77599999999998,-126.57589967024083,6.1;-97.27600000000001,-126.57589967024083,6.1;-97.77599999999997,-126.57589967024083,6.1;-98.27599999999998,-126.57589967024083,6.1;-98.77600000000001,-126.57589967024083,6.1;-99.27599999999995,-126.57589967024083,6.1;-99.77599999999998,-126.57589967024083,6.1;-100.27600000000001,-126.57589967024083,6.1;-100.77599999999995,-126.57589967024083,6.1;-101.27599999999998,-126.57589967024083,6.1;-101.77600000000001,-126.57589967024083,6.1;-102.27599999999995,-126.57589967024083,6.1;-102.77599999999998,-126.57589967024083,6.1;-103.27600000000001,-126.57589967024083,6.1;-103.77599999999995,-126.57589967024083,6.1;-104.27599999999997,-126.57589967024083,6.1;-104.77600000000001,-126.57589967024083,6.1;-104.83100000000005,-126.57589967024083,6.1;-105.09246722824304,-126.5873155759656,6.1;-105.35194453300085,-126.62147641120418,6.1;-105.60745713530764,-126.67812219137362,6.1;-105.85706042997705,-126.75682180788311,6.1;-106.0988547852221,-126.85697630913091,6.1;-106.33100000000005,-126.97782345888754,6.1;-106.5517293090532,-127.11844353737382,6.1;-106.75936282905968,-127.27776634088391,6.1;-106.95232034355966,-127.45457932668121,6.1;-107.12913332935696,-127.64753684118119,6.1;-107.28845613286705,-127.85517036118767,6.1;-107.42907621135335,-128.07589967024083,6.1;-107.54992336110996,-128.30804488501877,6.1;-107.65007786235776,-128.5498392402638,6.1;-107.72877747886726,-128.79944253493323,6.1;-107.7854232590367,-129.05495513724003,6.1;-107.81958409427527,-129.31443244199784,6.1;-107.83100000000005,-129.57589967024083,6.1;-107.83100000000005,-130.07589967024086,6.1;-107.83100000000005,-130.5758996702408,6.1;-107.83100000000005,-131.07589967024083,6.1;-107.83100000000005,-131.57589967024086,6.1;-107.83100000000005,-132.0758996702408,6.1;-107.83100000000005,-132.57589967024083,6.1;-107.83100000000005,-133.07589967024086,6.1;-107.83100000000005,-133.5758996702408,6.1;-107.83100000000005,-134.07589967024083,6.1;-107.83100000000005,-134.29375000000007,6.1;-107.84622120763305,-134.64237297099072,6.1;-107.89176898795121,-134.9883427106678,6.1;-107.9672966948438,-135.3290261804102,6.1;-108.07222951685642,-135.66183057330275,6.1;-108.20576885185342,-135.98422304696282,6.1;-108.3668983848623,-136.2937500000001,6.1;-108.55439182284407,-136.5880557454043,6.1;-108.76682222752416,-136.86490043874628,6.1;-109.00257287525383,-137.12217712474626,6.1;-109.2598495612539,-137.357927772476,6.1;-109.53669425459589,-137.570358177156,6.1;-109.83100000000007,-137.75785161513778,6.1;-110.14052695303727,-137.91898114814668,6.1;-110.46291942669743,-138.05252048314367,6.1;-110.79572381958997,-138.1574533051564,6.1;-111.13640728933237,-138.23298101204895,6.1;-111.48237702900944,-138.27852879236704,6.1;-111.83100000000002,-138.29375000000005,6.1;-112.33100000000005,-138.29375000000005,6.1;-112.6845,-138.29375000000005,6.1"
                
                var arr = data.split(';');
                for (let i = 0; i < arr.length; i++) {
                    el = arr[i];
                    var elr = el.split(',');
                    arrAll.push(elr)
                }
                console.log(arrAll)
                this.cars_.lines = arrAll; //车辆二维坐标路径
                //this.$refs.test.innerHTML  = html;
                this.drawcanvasAnim(this.cars_.lines)
            })
            .catch( (error) => {
                console.log(error);
            });
    }

    //根据接口数据 绘制动画层
    m.prototype.drawcanvasAnim = function(data){
        let ctx = this.rootCars.getContext('2d');
        let s = this.stage_;
        debugger
        ctx.save();
        ctx.translate(s.translateX * s.ratio, -s.translateY * s.ratio) //动画层的 偏移量
        console.log(s.ratio);

        //绘制路线
        ctx.beginPath();
        for (let i = 0; i < data.length; i++) {
            if(i===0){
                ctx.moveTo(data[0][0]*s.ratio,-data[0][1]*s.ratio); //路线开始位置
                // ctx.moveTo(0,0);
                //绘制小车
                var car = document.getElementById('imgCar');
                var x = data[0][0] * s.ratio-car.width/2 //-(60.68728503669984*ratio-car.width/2);
                var y = -data[0][1] * s.ratio-car.height/2 //126.67589967051799*ratio-car.height/2;
                ctx.drawImage(car,x,y);
            }else{
                ctx.lineTo( data[i][0] * s.ratio, -data[i][1] * s.ratio ); //路线数据
            }
        }
        ctx.strokeStyle='yellow';
        ctx.setLineDash([6, 4]);
        ctx.stroke();
        ctx.restore();
    }

    
    












	m.prototype.ready = function(callback) {
		var me = this;
		w.apiready = function() {
			var header = document.getElementById('header');
			var head = document.getElementById('head');
			var footer = document.getElementById('footer');
			if (header) {
				me.headerPos = me.offset(header || head);
			}
			if(footer){
				me.fixIosXFooter(footer)
			}
			if (callback) callback();
		}
    }
    /**
	* 获取头部+状态栏高度
	* zjhoo
	*/
	m.prototype.getHeadHeight = function(){

        //var header = document.querySelector('#header');$api.fixStatusBar(header);
		return this.getStatusbarHeight() + 0.88* fontSize;
	}


    

	w.page = m;
    w.MAP_ = new m();
})(window)